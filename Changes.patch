Subject: [PATCH] Changes
---
Index: src/main/java/com/vn/payments/entity/Invoice.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/vn/payments/entity/Invoice.java b/src/main/java/com/vn/payments/entity/Invoice.java
--- a/src/main/java/com/vn/payments/entity/Invoice.java	
+++ b/src/main/java/com/vn/payments/entity/Invoice.java	
@@ -3,87 +3,48 @@
 import java.math.BigDecimal;
 import java.time.LocalDate;
 import java.util.UUID;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.Id;
-import javax.persistence.Table;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
+import lombok.*;
 
 /**
  * Represents an Invoice entity. This class is mapped to the "invoices" table in the database.
  */
 @Entity
 @Table(name = "invoices")
+@NoArgsConstructor
+@AllArgsConstructor
+@Getter
+@Setter
+@Builder
 public class Invoice {
 
-    // Unique identifier for the invoice, auto-generated by the database
     @Id
     @GeneratedValue(generator = "UUID")
     private UUID id;
 
-    // The total amount of the invoice
     private BigDecimal amount;
 
-    // The amount that has been paid towards the invoice. Defaults to 0.
     private BigDecimal paidAmount = BigDecimal.ZERO;
 
-    // The date when the invoice is due
     private LocalDate dueDate;
 
-    // The status of the invoice (e.g., "pending", "paid", "void")
-    private String status = "pending";
-
-    // Default constructor required by JPA
-    public Invoice() {
-    }
-
-    /**
-     * Constructor for creating a new Invoice.
-     * @param amount The total amount of the invoice.
-     * @param dueDate The due date of the invoice.
-     */
-    public Invoice(BigDecimal amount, LocalDate dueDate) {
-        this.amount = amount;
-        this.dueDate = dueDate;
-    }
-
-    // Getters and Setters
-    public UUID getId() {
-        return id;
-    }
-
-    public void setId(UUID id) {
-        this.id = id;
-    }
-
-    public BigDecimal getAmount() {
-        return amount;
-    }
+    private Status status = Status.PENDING;
 
-    public void setAmount(BigDecimal amount) {
-        this.amount = amount;
-    }
+    public enum Status{
+        PENDING("pending"),
+        PAID("paid"),
+        VOID("void");
 
-    public BigDecimal getPaidAmount() {
-        return paidAmount;
-    }
+        private final String stringValue;
 
-    public void setPaidAmount(BigDecimal paidAmount) {
-        this.paidAmount = paidAmount;
-    }
-
-    public LocalDate getDueDate() {
-        return dueDate;
-    }
-
-    public void setDueDate(LocalDate dueDate) {
-        this.dueDate = dueDate;
+        Status(String stringValue) {
+            this.stringValue = stringValue;
+        }
+        public String getStringValue() {
+            return stringValue;
+        }
     }
-
-    public String getStatus() {
-        return status;
-    }
-
-    public void setStatus(String status) {
-        this.status = status;
-    }
 }
\ No newline at end of file
Index: src/main/java/com/vn/payments/controller/InvoiceController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/vn/payments/controller/InvoiceController.java b/src/main/java/com/vn/payments/controller/InvoiceController.java
--- a/src/main/java/com/vn/payments/controller/InvoiceController.java	
+++ b/src/main/java/com/vn/payments/controller/InvoiceController.java	
@@ -1,21 +1,45 @@
 package com.vn.payments.controller;
 
 import com.vn.payments.entity.Invoice;
+import com.vn.payments.serivce.InvoiceService;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.RestController;
+import jakarta.validation.constraints.NotNull;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
 
 import java.util.Collections;
 import java.util.List;
+import java.util.UUID;
 
 @RestController
 @Tag(name = "Invoices and Payments API", description = "Endpoints for payments and invoices")
-public class PaymentsController {
+public class InvoiceController {
+
+    @Autowired
+    InvoiceService invoiceService;
+
+    @PostMapping("/invoice")
+    @Operation(summary = "Create an invoice", description = "Create a new invoice.")
+    public @ResponseBody Invoice postInvoice(@RequestBody   Invoice invoice) {
+        return invoiceService.createInvoice(invoice);
+    }
+    @GetMapping("/invoice")
+    @Operation(summary = "Returns all invoices", description = "get all invoices in the system.")
+    public List<Invoice> getInvoices() {
+        return invoiceService.getAllInvoices();
+    }
 
-    @GetMapping("/invoices")
-    @Operation(summary = "Returns all payment", description = "get all payments in the system.")
-    public List<Invoice> getList() {
-        return Collections.emptyList();
+    @GetMapping("/invoice/{invoiceId}")
+    @Operation(summary = "Returns invoice by Id", description = "get an invoice by an Id")
+    public @ResponseBody Invoice getInvoice(@PathVariable UUID invoiceId) {
+        return invoiceService.getInvoice(invoiceId).get();
     }
+
+    @DeleteMapping("/invoice/{invoiceId}")
+    @Operation(summary = "Delete invoice", description = "Deletes an invoice by Id.")
+    public void deleteInvoice(@NotNull  UUID id) {
+        invoiceService.deleteInvoice(id);
+    }
+
 }
\ No newline at end of file
Index: src/main/java/com/vn/payments/repository/InvoiceRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/vn/payments/repository/InvoiceRepository.java b/src/main/java/com/vn/payments/repository/InvoiceRepository.java
--- a/src/main/java/com/vn/payments/repository/InvoiceRepository.java	
+++ b/src/main/java/com/vn/payments/repository/InvoiceRepository.java	
@@ -1,2 +1,11 @@
-package com.vn.payments.repository;public class InvoiceRepository {
+package com.vn.payments.repository;
+
+import java.util.UUID;
+
+import com.vn.payments.entity.Invoice;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface InvoiceRepository extends JpaRepository<Invoice, UUID> {
 }
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	
+++ b/pom.xml	
@@ -38,6 +38,10 @@
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-web</artifactId>
 		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-validation</artifactId>
+		</dependency>
 
 		<dependency>
 			<groupId>com.h2database</groupId>
@@ -54,7 +58,11 @@
 			<artifactId>spring-boot-starter-test</artifactId>
 			<scope>test</scope>
 		</dependency>
-	</dependencies>
+		<dependency>
+			<groupId>org.springdoc</groupId>
+			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
+			<version>2.0.2</version> </dependency>
+		</dependencies>
 
 	<build>
 		<plugins>
Index: src/main/java/com/vn/payments/serivce/InvoiceServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/vn/payments/serivce/InvoiceServiceImpl.java b/src/main/java/com/vn/payments/serivce/InvoiceServiceImpl.java
--- a/src/main/java/com/vn/payments/serivce/InvoiceServiceImpl.java	
+++ b/src/main/java/com/vn/payments/serivce/InvoiceServiceImpl.java	
@@ -1,2 +1,37 @@
-package com.vn.payments.serivce;public class InvoiceServiceImpl {
+package com.vn.payments.serivce;
+
+import com.vn.payments.entity.Invoice;
+import com.vn.payments.repository.InvoiceRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.Optional;
+import java.util.UUID;
+
+@Service
+public class InvoiceServiceImpl implements  InvoiceService{
+
+    @Autowired
+    InvoiceRepository invoiceRepository;
+
+    @Override
+    public Optional<Invoice> getInvoice(java.util.UUID id) {
+        return invoiceRepository.findById(id);
+    }
+
+    @Override
+    public List<Invoice> getAllInvoices() {
+        return invoiceRepository.findAll();
+    }
+
+    @Override
+    public Invoice createInvoice(Invoice invoice) {
+        return invoiceRepository.save(invoice);
+    }
+
+    @Override
+    public void deleteInvoice(UUID id) {
+        invoiceRepository.deleteById(id);
+    }
 }
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	
+++ b/src/main/resources/application.properties	
@@ -1,1 +1,24 @@
 spring.application.name=payments
+
+# H2 Database Configuration
+spring.h2.console.enabled=true
+spring.h2.console.path=/h2-console
+
+spring.datasource.url=jdbc:h2:mem:invoicedb
+
+# Credentials for the database.
+spring.datasource.username=sa
+spring.datasource.password=password
+
+# Driver and platform settings. Spring Boot auto-configures this, but it's good practice to specify.
+spring.datasource.driverClassName=org.h2.Driver
+spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
+
+# JPA and Hibernate configuration for DDL (Data Definition Language)
+# 'create-drop' creates the schema on startup and drops it on shutdown.
+# This is great for development, as it ensures a clean state every time.
+# Other options: 'create', 'update', 'none', 'validate'.
+spring.jpa.hibernate.ddl-auto=create-drop
+
+# Show SQL queries in the console for debugging
+spring.jpa.show-sql=true
Index: src/main/java/com/vn/payments/serivce/InvoiceService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/vn/payments/serivce/InvoiceService.java b/src/main/java/com/vn/payments/serivce/InvoiceService.java
--- a/src/main/java/com/vn/payments/serivce/InvoiceService.java	
+++ b/src/main/java/com/vn/payments/serivce/InvoiceService.java	
@@ -1,2 +1,18 @@
-package com.vn.payments.serivce;public class InvoiceService {
+package com.vn.payments.serivce;
+
+import com.vn.payments.entity.Invoice;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.Optional;
+import java.util.UUID;
+
+
+public interface InvoiceService {
+    public Optional<Invoice> getInvoice(UUID id);
+    public List<Invoice> getAllInvoices();
+
+    public Invoice createInvoice(Invoice invoice);
+
+    public void deleteInvoice(UUID id);
 }
